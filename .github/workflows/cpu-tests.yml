name: CPU tests

on:
  pull_request_target:
    # triggered on pull requests to main or develop
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop
    tags:
      - v*

env:
  IMAGE_NAME: mala_conda_cpu

jobs:
  # Build and push Docker temporary image to GitHub Packages.
  build-temp-docker-image-cpu:
    runs-on: ubuntu-18.04
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set environment variables
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "IMAGE_ID=$IMAGE_ID"

          # Create environment variable to which any subsequent steps in a workflow job have access
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Pull latest image from registry
        run: docker pull $IMAGE_ID || true

      - name: Build temporary image
        run: |
          docker build . --file Dockerfile --tag $IMAGE_NAME --cache-from=$IMAGE_ID --build-arg DEVICE=cpu

          # get image IDs (hash of the local image JSON configuration) and check if images are equal
          IMAGE_ID_OLD=$(docker images --format "{{.ID}}" --no-trunc --filter=reference=$IMAGE_ID)
          IMAGE_ID_NEW=$(docker images --format "{{.ID}}" --no-trunc --filter=reference=$IMAGE_NAME)

          echo "IMAGE_ID_OLD=$IMAGE_ID_OLD" >> $GITHUB_ENV
          echo "IMAGE_ID_NEW=$IMAGE_ID_NEW" >> $GITHUB_ENV

          [[ "$IMAGE_ID_OLD" == "$IMAGE_ID_NEW" ]] && echo "Image IDs are equal" || true

      - name: Tag and push temporary image
        # only necessary if temporary image is different from latest
        if: env.IMAGE_ID_OLD != env.IMAGE_ID_NEW
        run: |
          # print some environment variables from the github context (for debugging)
          echo "github.head_ref=${{ github.head_ref }}"
          echo "github.ref=${{ github.ref }}"
          echo "github.ref_name=${{ github.ref_name }}"
          echo "github.repository_owner=${{ github.repository_owner }}"
          echo "github.run_id=${{ github.run_id }}"

          echo "IMAGE_ID_OLD=$IMAGE_ID_OLD"

          # Use GITHUB_RUN_ID, a unique number for each workflow run within a repository as a temporary Docker tag.
          # This number does not change for re-runs of the workflow.
          # An alternative, more expressive value would be a combination of GIT_SHA and GITHUB_REF_NAME:
          #
          #   SHORT_GIT_HASH=$(git rev-parse --short "$GITHUB_SHA") # commit SHA that triggered the workflow
          #   TAG=${GITHUB_REF_NAME}-${SHORT_GIT_HASH}
          #
          # This variable would have to be made available in context 'env' in order to be reused in subsequent jobs.
          # The 'env' context is however not available for the 'image' key, see FIXME in 'cpu-tests` job.
          TAG=$GITHUB_RUN_ID
          echo "TAG=$TAG"

          docker tag $IMAGE_NAME $IMAGE_ID:$TAG
          docker push $IMAGE_ID:$TAG

      - name: Set matrix
        id: set-matrix
        run: |
          if [[ "$IMAGE_ID_OLD" == "$IMAGE_ID_NEW" ]]
          then
            echo "::set-output name=matrix::[\"latest\"]"
          else
            echo "::set-output name=matrix::[\"${{ github.run_id }}\"]"
          fi

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  check-output:
    needs: build-temp-docker-image-cpu
    runs-on: ubuntu-18.04
    steps:
      - run: echo ${{needs.build-temp-docker-image-cpu.outputs.matrix}}

  cpu-tests:
    needs: build-temp-docker-image-cpu
    runs-on: ubuntu-18.04
    strategy:
      matrix:
       version: ${{fromJSON(needs.build-temp-docker-image-cpu.outputs.matrix)}}
    container:
      # FIXME: Would be nice to replace hard coded 'mala_conda_cpu' with '${{ env.IMAGE_ID }}' in the
      #        line below, but the 'env' context is not available for the workflow 'image' key, see
      #        https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
      image: ghcr.io/${{ github.repository_owner }}/mala_conda_cpu:${{ matrix.version }}
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out repository (mala)
        uses: actions/checkout@v2

      - name: Show os-release
        run: cat /etc/os-release

  push-temp-as-latest-docker-image-cpu:
    needs: cpu-tests
    runs-on: ubuntu-18.04
    # triggered on pushes to main or develop (this includes merge commits of merged PRs)
    #if: github.event_name == 'push'
    if: ${{ (github.event_name == 'push') && (env.IMAGE_ID_OLD != env.IMAGE_ID_NEW) }}
    steps:
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull temp image from registry
        run: docker pull ghcr.io/${{ github.repository_owner }}/${IMAGE_NAME}:${GITHUB_RUN_ID}

      - name: Tag and push Docker image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          docker tag $IMAGE_ID:$GITHUB_RUN_ID $IMAGE_ID:latest
          docker push $IMAGE_ID:latest

  cleanup:
    # Remove intermediate Docker image from ghcr.io
    runs-on: ubuntu-18.04
    needs: cpu-tests
    # FIXME: In the future, this workflow should _always_ be triggered ('always()') rather than skipped ('false').
    #        We currently skip it as the 'ghcr-delet-image-action' does not support GITHUB_TOKEN. It actually
    #        finds the image in the registry, but can't delete it and fails with cryptic 'Error: Package not found.'
    #        This is expected to change at some point.
    if: false #always()
    steps:
      - name: Delete temporary image
        uses: bots-house/ghcr-delete-image-action@v1.0.1
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ env.IMAGE_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}  # <-- GITHUB_TOKEN is currently not supported (only PATs)
          tag: ${{ github.run_id }}
