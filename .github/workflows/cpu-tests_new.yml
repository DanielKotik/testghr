name: CPU tests new

on:
  pull_request:
    # Trigger on pull requests to main or develop
    branches:
      - main
      - develop
  push:
    # Trigger on pushes to main or develop and for git tag pushes
    branches:
      - main
      - develop
    tags:
      - v*

env:
  IMAGE_NAME: mala_conda_cpu_new
  IMAGE_REGISTRY: ghcr.io
  DOCKER_ARTIFACT_PATH: artifacts/docker

jobs:
  build-temp-docker-image-cpu:
    # Build and push temporary Docker image to GitHub's container registry
    runs-on: ubuntu-18.04
    permissions:   # TODO: not needed?!
      packages: write
      contents: read
    steps:
      - name: Check out repository  # TODO: not needed in this job?!
        uses: actions/checkout@v2

      - name: Set environment variables
        id: set-env
        run: |
          # Change all uppercase letters to lowercase
          IMAGE_REPO=$IMAGE_REGISTRY/$(echo $GITHUB_REPOSITORY_OWNER | tr '[A-Z]' '[a-z]')

          # Create environment variable to which any subsequent steps inside this workflow's job have access
          echo "IMAGE_REPO=$IMAGE_REPO" >> $GITHUB_ENV
          echo "IMAGE_REPO=$IMAGE_REPO"

          # Create output variable which can be used globally among jobs
          echo "::set-output name=IMAGE_REPO::$IMAGE_REPO"

      - name: Pull latest image from registry
        run: docker pull $IMAGE_REPO/$IMAGE_NAME || true

      - name: Build temporary image
        id: build-temp
        run: |
          docker build . --file Dockerfile --tag $IMAGE_NAME --cache-from=$IMAGE_REPO/$IMAGE_NAME:latest --build-arg DEVICE=cpu

          # Get image IDs (hash of the local image JSON configuration) and check if images are equal
          IMAGE_ID_OLD=$(docker images --format "{{.ID}}" --no-trunc --filter=reference=$IMAGE_REPO/$IMAGE_NAME)
          IMAGE_ID_NEW=$(docker images --format "{{.ID}}" --no-trunc --filter=reference=$IMAGE_NAME)

          echo "IMAGE_ID_OLD=$IMAGE_ID_OLD" >> $GITHUB_ENV
          echo "IMAGE_ID_NEW=$IMAGE_ID_NEW" >> $GITHUB_ENV

          [[ "$IMAGE_ID_OLD" == "$IMAGE_ID_NEW" ]] && echo "Image IDs are equal" || echo "Image IDs differ"

          docker images # TODO: remove line

      - name: Tag temporary built Docker image
        if: env.IMAGE_ID_OLD != env.IMAGE_ID_NEW
        run: |
          # Print some environment variables from the github context (for debugging)
          echo "github.head_ref=${{ github.head_ref }}"
          echo "github.ref=${{ github.ref }}"
          echo "github.ref_name=${{ github.ref_name }}"
          echo "github.repository_owner=${{ github.repository_owner }}"
          echo "github.run_id=${{ github.run_id }}"

          mkdir -p $DOCKER_ARTIFACT_PATH

          # if temporary image is different from latest on ghcr.io
          if [[ "$IMAGE_ID_OLD" != "$IMAGE_ID_NEW" ]]
          then
            # Use GITHUB_RUN_ID, a unique number for each workflow run within a repository as a temporary Docker tag
            #docker tag $IMAGE_NAME $IMAGE_ID:$GITHUB_RUN_ID
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$GITHUB_RUN_ID

            #docker push $IMAGE_ID:$GITHUB_RUN_ID
            docker save $IMAGE_NAME:$GITHUB_RUN_ID | gzip > $DOCKER_ARTIFACT_PATH/docker-image.tar.gz
          else
            docker save $IMAGE_NAME:latest | gzip > $DOCKER_ARTIFACT_PATH/docker-image.tar.gz # TODO: obsolete
          fi

      - name: Temporarily save Docker image
        if: env.IMAGE_ID_OLD != env.IMAGE_ID_NEW
        uses: actions/upload-artifact@v2
        with:
          name: docker-artifact
          path: $DOCKER_ARTIFACT_PATH
          retention-days: 1

      - name: Set matrix
        id: set-matrix
        run: |
          if [[ "$IMAGE_ID_OLD" == "$IMAGE_ID_NEW" ]]
          then
            echo "::set-output name=matrix::[\"latest\"]"
          else
            echo "::set-output name=matrix::[\"${{ github.run_id }}\"]"
          fi

    outputs:
      image-repo: ${{ steps.set-env.outputs.IMAGE_REPO }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  check-output:
    needs: build-temp-docker-image-cpu
    runs-on: ubuntu-18.04
    env:
      IMAGE_REPO: ${{ needs.build-temp-docker-image-cpu.outputs.image-repo }}
    if: contains(needs.build-temp-docker-image-cpu.outputs.matrix, 'latest') == true
    steps:
      - run: |
          echo $GITHUB_REPOSITORY_OWNER $IMAGE_REPO
          echo "matrix=${{needs.build-temp-docker-image-cpu.outputs.matrix}}"
          echo "equal=${{needs.build-temp-docker-image-cpu.outputs.equal}}"
          echo "${{ fromJSON(needs.build-temp-docker-image-cpu.outputs.matrix) }}"
          echo "${{ fromJSON(needs.build-temp-docker-image-cpu.outputs.matrix) == 'latest' }}"
          [[ ${{ (github.event_name == 'push') }} ]] && echo "TRUE"  || true
          [[ ${{ (needs.build-temp-docker-image-cpu.outputs.equal == 'false') }} ]] && echo "TRUE" || true
          [[ ${{ (github.event_name == 'push') && (needs.build-temp-docker-image-cpu.outputs.equal == 'false') }} ]] && echo "TRUE" || true
          [[ ${{ (contains(github.ref_name, 'develop') || contains(github.ref_name, 'main')) }} ]] && echo "contain TRUE" || true
          [[ ${{ needs.build-temp-docker-image-cpu.outputs.matrix }} == '[latest]' ]] && echo "A" || true
          [[ ${{ needs.build-temp-docker-image-cpu.outputs.matrix }} != '["latest"]' ]] && echo "B" || true

  cpu-tests:
    needs: build-temp-docker-image-cpu
    runs-on: ubuntu-18.04
    env:
      IMAGE_REPO: ${{ needs.build-temp-docker-image-cpu.outputs.image-repo }}
    strategy:
      matrix:
       version: ${{ fromJSON(needs.build-temp-docker-image-cpu.outputs.matrix) }} # TODO: rename version: -> docker-tag:?
    steps:
      - name: Check out repository (mala)
        uses: actions/checkout@v2

      - name: "Prepare environment: Retrieve saved artifactes"
        if: matrix.version != 'latest'
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: $DOCKER_ARTIFACT_PATH

      - name: "Prepare environment: Load Docker image from artifacts"
        if: matrix.version != 'latest'
        run: |
          cd $DOCKER_ARTIFACT_PATH
          docker load < docker-image.tar.gz
          docker images # TODO: remove line

      - name: "Prepare environment: Pull latest image from registry"
        if: matrix.version == 'latest'
        run: |
          docker pull $IMAGE_REPO/$IMAGE_NAME:latest
          docker images
          docker image tag $IMAGE_REPO/$IMAGE_NAME:latest $IMAGE_NAME:latest
          #docker images
          #docker ps --all --last 10

      - name: "Prepare environment: Run Docker container"
        run: |
          # Make the github workspace (i.e. checked out mala repository) available inside Docker container
          docker run -d --rm --name mala-cpu -v /github/workspace/:/home -w /home $IMAGE_NAME:${{ matrix.version }}
          docker ps --all --last 10

      - name: Show some Docker container specifics
        # Exec all commands inside the mala-cpu container
        shell: 'bash -c "docker exec -i mala-cpu bash < {0}"'
        run: |
          cat /etc/os-release
          conda env list
          pwd
          ls -lah

  retag-docker-image-cpu:
    needs: [cpu-tests, build-temp-docker-image-cpu]
    runs-on: ubuntu-18.04
    env:
      IMAGE_REPO: ${{ needs.build-temp-docker-image-cpu.outputs.image-repo }}
    strategy:
      matrix:
       version: ${{ fromJSON(needs.build-temp-docker-image-cpu.outputs.matrix) }}
    # Trigger on pushes to main or develop (this includes _merged_ PRs) only if Docker image has changed and on git tag pushes
    if: |
      (
       (contains(github.ref_name, 'develop') || contains(github.ref_name, 'main'))
       && contains(needs.build-temp-docker-image-cpu.outputs.matrix, 'latest') != true
      ) || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Check out repository # TODO: obsolete?
        uses: actions/checkout@v2

      - name: Retrieve saved artifactes
        if: matrix.version != 'latest'
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: artifacts/docker

      - name: Load Docker image from artifacts
        if: matrix.version != 'latest'
        run: |
          cd artifacts/docker
          docker load < docker-image.tar.gz

      - name: Pull latest image from registry
        if: matrix.version == 'latest'
        run: |
          docker pull $IMAGE_REPO/$IMAGE_NAME:latest

      - name: Tag Docker image
        run: |
          # on change of Docker image
          if ${{ matrix.version != 'latest' }}; then
            GIT_SHA=${GITHUB_REF_NAME}-$(git rev-parse --short "$GITHUB_SHA")
            echo "GIT_SHA=$GIT_SHA"

            docker tag $IMAGE_NAME:$GITHUB_RUN_ID $IMAGE_REPO/$IMAGE_NAME:$GIT_SHA
            docker tag $IMAGE_NAME:$GITHUB_RUN_ID $IMAGE_REPO/$IMAGE_NAME:latest
          fi

          # on push of git tag
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
            GIT_TAG=$(echo "${{ github.ref_name }}" | sed -e 's/^v//')
            echo "GIT_TAG=$GIT_TAG"

            docker tag $IMAGE_NAME:latest $IMAGE_REPO/$IMAGE_NAME:$GIT_TAG
          fi

      - name: Log into registry
        # authentication only required for pushing images
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker image
        run: docker push $IMAGE_REPO/$IMAGE_NAME --all-tags

  cleanup:
    # Remove intermediate Docker image from ghcr.io
    runs-on: ubuntu-18.04
    #needs: cpu-tests
    # FIXME: In the future, this workflow should _always_ be triggered ('always()') rather than skipped ('false').
    #        We currently skip it as the 'ghcr-delet-image-action' does not support GITHUB_TOKEN. It actually
    #        finds the image in the registry, but can't delete it and fails with cryptic 'Error: Package not found.'
    #        This is expected to change at some point.
    if: false #always()
    steps:
      - name: Delete temporary image
        uses: bots-house/ghcr-delete-image-action@v1.0.1
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ env.IMAGE_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}  # <-- GITHUB_TOKEN is currently not supported (only PATs)
          tag: ${{ github.run_id }}
